# Version of docker-compose
version: '3'

# Containers we are going to run
services:
  # #Our eliir service container
  # service:
  #   # The build parameters for this container.
  #   build:
  #     # Here we define that it should build from the current directory
  #     context: ./todo_service
  #   environment:
  #     # Variables to connect to our Postgres server
  #     PGUSER: postgres
  #     PGPASSWORD: postgres
  #     PGDATABASE: todo_api_test
  #     PGPORT: 5432
  #     # Hostname of our Postgres container
  #     PGHOST: db
  #     KAFKAHOST: kafka
  #     MIX_ENV: integration
  #   depends_on:
  #     # The db container needs to be started before we start this container
  #     - db
  #     - kafka
  #     - phoenix
  phoenix:
    # The build parameters for this container.
    build:
      # Here we define that it should build from the current directory
      context: ./todo_api
    environment:
      # Variables to connect to our Postgres server
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: todo_api_test
      PGPORT: 5432
      # Hostname of our Postgres container
      PGHOST: db
      KAFKAHOST: kafka
      MIX_ENV: integration
    ports:
      # Mapping the port to make the Phoenix app accessible outside of the container
      - "4002:4002"
    depends_on:
      # The db container needs to be started before we start this container
      - db
      - kafka
  db:
    # We use the predefined Postgres image
    image: postgres:11.1
    environment:
      # Set user/password for Postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # Set a path where Postgres should store the data
      PGDATA: /var/lib/postgresql/data/pgdata
    restart: always
    ports:
      # Mapping the port to make the Phoenix app accessible outside of the container
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - 2181:2181

  kafka:
    image: wurstmeister/kafka:0.10.2.1
    expose:
      - "9092"
    ports:
      - "9092:9092"
    links:
      - zookeeper
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_PORT: 9092
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-rest:
    image: nodefluent/kafka-rest
    ports:
      - 8082:8082
    links:
      - kafka
      - zookeeper
    depends_on:
      - kafka
      - zookeeper
    environment:
      DEBUG: "*"

  kafka-rest-ui:
    image: nodefluent/kafka-rest-ui
    ports:
      - 8000:8000
    links:
      - kafka-rest
    depends_on:
      - kafka-rest
    environment:
      DEBUG: "*"
      REACT_APP_KAFKA_REST_URL: "http://kafka-rest:8082/"
      REACT_APP_TIMEOUT: "3000"
      PROXY: "yes"
      BASIC_AUTH_USER: "admin"
      BASIC_AUTH_PASSWORD: "admin"
# Define the volumes
volumes:
  pgdata: