use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :todo_api, TodoApiWeb.Endpoint,
  http: [port: 4002],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: []

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime
# Configure your database
config :todo_api, TodoApi.Repo,
  username: System.get_env("PGUSER"), # "postgres",
  password: System.get_env("PGPASSWORD"), # "postgres",
  database: System.get_env("PGDATABASE"), # "todo_api_test",
  hostname: System.get_env("PGHOST"), # "localhost",
  port: System.get_env("PGPORT") |> String.to_integer,
  pool_size: 10

config :kafka_ex,
# a list of brokers to connect to in {"HOST", port} format
brokers: [
  {System.get_env("KAFKAHOST"), 9092},
],
# the default consumer group for worker processes, must be a binary (string)
#    NOTE if you are on Kafka < 0.8.2 or if you want to disable the use of
#    consumer groups, set this to :no_consumer_group (this is the
#    only exception to the requirement that this value be a binary)
consumer_group: "test-consumer-group",
# Set this value to true if you do not want the default
# `KafkaEx.Server` worker to start during application start-up -
# i.e., if you want to start your own set of named workers
disable_default_worker: false,
# Timeout value, in msec, for synchronous operations (e.g., network calls).
# If this value is greater than GenServer's default timeout of 5000, it will also
# be used as the timeout for work dispatched via KafkaEx.Server.call (e.g., KafkaEx.metadata).
# In those cases, it should be considered a 'total timeout', encompassing both network calls and
# wait time for the genservers.
sync_timeout: 3000,
# Supervision max_restarts - the maximum amount of restarts allowed in a time frame
max_restarts: 10,
# Supervision max_seconds -  the time frame in which :max_restarts applies
max_seconds: 60,
# Interval in milliseconds that GenConsumer waits to commit offsets.
commit_interval: 5_000,
# Threshold number of messages consumed for GenConsumer to commit offsets
# to the broker.
commit_threshold: 1,
# This is the flag that enables use of ssl
use_ssl: false,
# see SSL OPTION DESCRIPTIONS - CLIENT SIDE at http://erlang.org/doc/man/ssl.html
# for supported options
# ssl_options: [
#   cacertfile: System.cwd <> "/ssl/ca-cert",
#   certfile: System.cwd <> "/ssl/cert.pem",
#   keyfile: System.cwd <> "/ssl/key.pem",
# ],
# set this to the version of the kafka broker that you are using
# include only major.minor.patch versions.  must be at least 0.8.0
kafka_version: "0.9.0"

IO.puts "YESSSSSSSS IN HEREEEEE"
